type: note
init_time: '2020-01-14 09:28:06.576783'
parents:
- d7c97fb962ebeec3827179ecd2471c7720a8d86d
title: Python中的\_\_new\_\_方法
text: "在Python中的\\code{__init__}方法一般只是用来设置属性用的。\n换言之，\\code{__init__}只是在使用\\code{__new__}后获得对象后给对象加属性\n\
  而使用的特殊方法。\n\n所以说，真正可以获得对象的方法，还是要用到\\code{__new__}的特殊方法。\n\n而一般的类设计是不需要定义\\code{__new__}特殊方法的，\n\
  原因是对于它们来说继承属于\\code{object}类的\\code{__new__}方法就OK了\n（事实上是没有object这个类型的声明的，\n但是关于这个概念，每个设计类的人都要理解，因为它是用Python的解释器实现的，\n\
  是一切类的基石，就像内建类型一样，不过话说，object也的确是内建类型）。\n\n所以可以认为\\code{__new__}是特殊方法中的特殊方法。\n是调用类之后的之后第一个被调用的类方法。\n\
  而它生成的对象更是其他方法的基础。\n\n因为这个，\\code{__new__}不同与其他方法一样，反之，\n它被传入的第一个参数是\\code{cls}，是类对象，\n\
  而不像其他方法一样传入的是实例对象，也就是\\code{self}。\n在最后的最后，\\code{__new__}会返回一个类对象所对应的实例对象。\n\n\
  从类到对象，一般而言只需要调用\\code{object.__new__(cls)}方法就可以了。\n如果想对自己的对象加入更多的细节，\n都可以在自己的类下的\\\
  code{myclass.__new__}定义余下的，\n甚至还可以实现元类。\n\n当然如果有选择的话，在自己的对象下实现\\code{__init__}来定义，\n\
  这永远是最优选择，就如Python之禅所说的一样。\n当然从另一个方面来看的话，我们会发现\\code{__init__}并没有我们想象的那么必不可缺。\n很多时候甚至可以找到其他的办法来实现\\\
  code{__init__}方法所能办到的。\n但是其他的方法一般来说完全没必要，\n简单的\\code{__init__}已经简单得够招人喜欢了。\n\n在\\\
  code{__new__}中，为了使用父类所已经完成了的工作，\n也可以使用强有力的\\code{super()}，它的参数还有几个可以传值呢，\n从而为继承提供了更好的基础。\n"
