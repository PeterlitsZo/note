type: note
init_time: '2020-03-03 20:57:50.277423'
parents:
- d7c97fb962ebeec3827179ecd2471c7720a8d86d
title: python的多项式拟合
text: "之前的话我想要获得一个动态的页面，可以根据不同的窗口大小来动态匹配文本大小，\n比如说在一些窗口宽度大的地方，一般的像素密度比会小一些，为了显示合适的字，\n\
  需要把字调小（比如说，\\code{16px}），有时候在小屏幕上面，则需要把字号调大，\n比如说调成\\code{32px}。\n\n我不禁有些疑惑，像素到底是什么呢？比如说虽然移动端字的\\\
  code{px}值调大了，\n但是实际上的字的大小却变小了，虽然说是变小了，但是设备像素，本身就高，实际的物理\n尺寸却没有随着密度变得过于小（实际上移动端的密度对于电脑来说大得吓人）。\n\
  \n实际上，在真实的设备像素和众多的html长度之间，隔着一层CSS像素层，是一种相对像素。\n因为在移动段的ppi过于小，而且因为对应的页面指定的\\code{px}不变。\n\
  所以说在移动端，我们需要使用更多的像素来表示一个对应的CSS像素。\n\n其中设备像素叫做DP，而CSS像素\\ldots\\ldots 还真叫css像素。\n\
  \n描述物理像素和css像素之间的关系的式子就是DPR，设备像素比。\n\n而还有PPI来描述每单位的像素密度，说实话PPI的作用不大，因为不同的设备上并不是说，\n\
  各各单位一致就可以获得一个完美的关系，一般手机屏幕小，PPI高，\n元素的绝对宽高应该是相应会减少。\n\n所以说我们可以根据宽度的css像素来确定确定根的字长。\n\
  \n按理来说，在经典视角下我们看到的网页都会差不多一样大，\n因为css像素是在经典使用视角的长度来进行确定的。\n\n但是一般来说我们会适当的想减少信息大小来使得信息更加清楚。\n\
  所以针对不同的屏幕css像素宽度，代表了最少可以显示的信息流，\n信息流相对较小，那么我们更应该减少信息流来获得很好的观看体验。\n来达到大小差不多的样子（应该？）\n\
  \n为了只使用一个表达式来表达不同情况下的多项式拟合，\n使用python的numpy无疑让人心情愉悦。通过使用\\code{numpy.polyfit}和\\\
  code{numpy.poly1d}，\n很轻松就能得到一个适当的曲线。\n"
